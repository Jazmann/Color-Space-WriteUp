
Color Spaces and Information Storage for Computer Vision Processing 
Constructing a New Color Space  
In order to construct a new color space, we need to consider the coordinate system of the new color space, the orientation of the new color space, and the fidelity of the discrete representation of the axes. 
The first consideration is most easily decided; because there's little obvious advantage otherwise, we choose a Cartesean coordinate system as this allows for a straightforward transformation involving only rotation, translation and scaling. Because we're interested in the color information in the image, it's useful to design the color space so there is a luminosity axis. This choice determines two of three rotational degrees of freedom, as will be discussed below. 
As for the discrete representation of the axes, it's desired that all the information captured pertaining to a hand should be preserved; all other information is irrelevant. However, here we'll consider only the effect of a rotation and scaling on the discrete representation. 
Camera RGB and Normalization for Discrete Range  
Due to the iPhone hardware being locked down at the application level, we do not have access to the raw camera feed. We do, however, have access to the post-processing (color-rebalanced and white-point-corrected) 8-bit RGB image data. 
Because we're searching for particular points in the real color space — which, being a continuous function, is infinite dimensional — there is a possibility in the future that larger multi-channel color spaces will be much more common, such as the 8-channel color spaces currently in development. Though most such cameras are primarily designed for post-production editing for still pictures and film (e.g. changing the lighting independent of the scene), as well as visual effects, the possibilities for computer vision are exciting. However, computer vision tasks are computationally intensive, and more often than not require operation in real time, so there is a natural inclination to shy away from large data sets in practical computer vision applications; many tasks are done in grayscale or single-channel processing to expedite the process. 
As such, there is a need to develop techniques which keep the relevant information while quickly and efficiently discarding the irrelevant information. This is true for the RGB space at the moment, and the aim of this first part of the work. 
Rotation Matrix 
 Any rotation about an axis can be represented by a 3x3 square matrix in a 3D space. Since they are invertible, they're guaranteed to be non-singular. However, as there are many ways in which to rotate an object from one position to another, or use a combination of different rotations to get to the same point, they aren't necessarily unique. For this application, we require rotation about three different axes, which can be expressed thus: 
 Subscript[1, x](θ) 	 ==[ 1 	 0 	 0 
 0 	 cos
θ 	 -
sin
θ 
 0 	 sin
θ 	 cos
θ 

] 
 Subscript[, y](θ) 	 ==[ cos
θ 	 0 	 sin
θ 
 0 	 1 	 0 
 -
sin
θ 	 0 	 cos
θ 

] 
 Subscript[, z](θ) 	 ==[ cos
θ 	 -
sin
θ 	 0 
 sin
θ 	 cos
θ 	 0 
 0 	 0 	 1 

] 


Any rotation which orients the RGB color space such that one of the new axes lies along the luminosity direction is sufficient; a rotation which aligns the L axis along the luminosity direction is produced by a rotation of π/4 about the red (R) axis, followed by a rotation of arctan 1/Sqrt[2] about the green (G) axis. This leaves one free rotational degree of freedom about the L axis. The resulting rotation matrix is given by:  

Subscript[, x y z](θ)==( 1/Sqrt[3] 	 1/Sqrt[3] 	 1/Sqrt[3] 
 -Sqrt[(2/3)]θ+6 	 Sqrt[2/3]cos(θ) 	 -Sqrt[(2/3)]6-θ 
 -Sqrt[(2/3)]cos(θ+6) 	 -Sqrt[(2/3)]sin(θ) 	 Sqrt[2/3]cos(6-θ) 

)
Where θ is the remaining rotational degree of freedom. 
Using the standard rotation matrices, we get a luminosity axis which spans the range 0:Sqrt[3]. However, the length of the two remaining axes are dependent on the value of θ used. This is a problem because, ultimately, we want the axes to fit in a range of an appropriate data type. It would be more useful to have a matrix which provided the specified rotation and scaled the axis to known lengths. In the case of the luminosity, this is straightforward; simply divide by Sqrt[3]. In the case of the other two axes, we need an explicit form for the lengths of the axis resulting from the rotation. 
Because the absolute values of the axes in the color space have no meaning, we're only interested in the position along the axis relative to its start and end, equivalent to talking about the position in the axis relative to 0:1, compared to about 0:255 in unsigned, 8-bit integers. The upside is that if we're rotating the cube about its corner, we're interested in the minimum and maximum values possible along the new axis direction, which will correspond to a corner of the RGB cube. With the L axis aligned along the luminosity direction, the range of the L axis is 0 to Sqrt[3]. The x and y axes are symmetrical, spanning a range centered on 0. The range of their values is dependent upon the remaining degree of freedom. 
We need to know, in each of the axes, how far out each point is. Because we're effectively rotating a hexagon, whatever the answer is, we know the function is going to be periodic, repeating every π/3 radians, so we only have to solve it in the 0:π/3 region and then generalize. First we take the coordinates of the RGB cube and perform the rotation to find the values in the new color space. 
The extent of the new axis is found by taking the maximum and minimum values of each row, i.e. the extreme corner positions relative to each new axis. An additional symmetry of the hexagonal projection of the RGB cube allows us to say that — whatever functional form is taken by one of the θ dependant ranges — the other can be found by a simple phase shift. So, recognizing that the minimum value is simply -1 times the maximum, we have simplified the problem to solving: 

max(±(sin(θ)/Sqrt[6])±(cos(θ)/Sqrt[2]),±Sqrt[(2/3)]sin(θ))  Where  0<=θ<=π/3
A graphical representation of the problem can be seen in Figure XXX . 
In the range 0:π/3, both sin and cos are positive, therefore the axis ranges are given by the following: 
  	 Min  	 Max  
 L  	 0  	 3  
 Ca  	 -
Sqrt[(2/3)]
cos
(6-((θ-6)mod π/3)) 	 Sqrt[2/3]
cos
(6-((θ-6)mod π/3)) 
 Cb  	 -
Sqrt[(2/3)]
cos
(6-(θ mod π/3)) 	 Sqrt[2/3]
cos
(6-(θ mod π/3)) 

 
The lengths of the axis after rotation are given by: 

L(θ)==( Sqrt[3] 
 Sqrt[2/3]sin(Overscript[ϑ, ~])+Sqrt[2]cos(Overscript[ϑ, ~]) 
 Sqrt[2/3]sin(Overscript[θ, ~])+Sqrt[2]cos(Overscript[θ, ~]) 

)  where  Overscript[ϑ, ~]==(θ-6)mod π/3
Overscript[θ, ~]==θ mod π/3


It is convenient to produce a transformation which will result in axes of known length. Because the rotation cannot include a translation, we desire a transformation matrix which will result in the ranges 0:1, -1/2:1/2, and -1/2:1/2. Such a transformation is easily obtained by multiplying the rotation matrix by a diagonal matrix with the reciprocal of the maximums found above placed along the diagonal. This will scale each axis to a unit length. 
The normalized 'rotation' matrix is given by: 
 (θ) 	 ==[θ]⊗Subscript[R, x y z](θ) 
  	 ==(1
1
1

)⊗Subscript[R, x y z](θ) 


This matrix is no longer technically a rotation matrix as its inverse is no longer equal to its transpose. It now equal to: 

(θ)==Subscript[R, x y z](θ)^T⊗(1/Sqrt[3]	1/Subscript[L, 2](θ)	1/Subscript[L, 3](θ)

)
Representing the Rotation 
The final piece of the metaphorical jigsaw is to add the capability to deal with the machine handling of the numerics. The transforms as defined above assume the capacity to represent the resulting numbers. Unfortunately, on a device, the numerics are not handled in such a pure way and — whilst we are uninterested in the information overflow outside the destination representation — this can cause instabilities in a practical implementation. In the development of the algorithm, it is therefore necessary to define these bounds. In the unit space, these bounds have already been defined by Equation 1 ; so long as the axis length can be represented on the device between these bounds, then overflow and underflow can be dealt with using a simple conditional statement. 
It is significantly advantageous to perform calculations using integer types, particularly given that the input and output types are integers with small ranges, meaning it's possible to construct algorithms which avoid conversion to floating point operations. To this end, we wish to determine the most efficient internal representation for the transformation. 
Principles of Optimization 
During the color space conversion, the pixel values are represented in three different ways: input, working and output representations. At each stage, we are concerned with preserving the information from the previous stage required by the next. For this reason, we have defined terms for the mathematical analysis of the problem, as well as terms for the algorithm development. The terms associated with each stage are as follows: 
 Data Types  	 Src Pixel Values  	 Trans Pixel Values  	 Dst Pixel Values  
 What?  	 Input  	 Working  	 Output  
 Where?  	 Initial  	 After Rotation  	 After Re-Distribution  
 Unit Range Value  	   	   	   
 1-1 Int Range Value  	   	   	   
 1-1 Max  	   	   	   
 1-1 Min  	   	   	   
 1-1 Range  	   	   	   


The rotation operation consists of 9 multiplications and 6 additions and constitutes the majority of the computational cost. It is this operation which we will focus our optimization efforts upon. The redistribution transformation, which comes after the rotation, processes each pixel channel value separately. This allows us to pull apart the rotation matrix by scaling each row arbitrarily, handing the knowledge of the scaling to the distribution. The goal of this section is to represent the matrix multiplication in such a way that we avoid floating-point operations. 

[θ]==(-
Scale
-

)⊗[θ] where  [θ]∈Z
Given an infinite set of integers, this is not a problem. However, we wish to choose  to lie in a finite range, which depends on the color depth of the source. Ideally, we'd like the result of the rotation to have a bit depth not greater than twice the bit depth of the source, i.e. for 8-bit pixel values, we would like the rotated LCaCb values to be expressible as 16-bit integers. To accommodate 3 multiplications and 2 additions, the matrix  needs to be represented in two fewer bits than the source. 
This unit range is discretized into steps of 
FractionBox["1"] and 
FractionBox["1"]. The question then is to what degree of accuracy do we need to represent the internal numerics? If we represent the transformation in a discrete type , we can express the problem in terms of the largest perturbation which can be made to the transformation without affecting the result. 

 · 	 == 	 let   	 ==+ 
 (+)· 	 ==+ 		
 therefore if · 	 == 	 then  ·== 	


The continuous rotation  can be expressed as the sum of its discrete representation  with a discretization factor  and the correction . The elements of the discrete rotation can be expressed as rational fractions. 

(==int(·))/(  where  int(1.5)==1,int(-1.5)==-1)
(therefore  -1)/(<<1)/


It should be noted that — unlike the source type — the perturbation can be negative. The definition of the function i n t results in the sign of the perturbation matching the sign of the discretized transformation matrix. We must therefore consider both the maximum and minimum of . As 0<=<=1 the extrema of  are found where  is a vector with elements of 0 and 1. If the matrix is decomposed into a sum of positive and negative elements 
SubscriptBox[==, +]
SubscriptBox[+, -] then the extrema are given by max(Subscript[, +]·1) and min(Subscript[, -]·1). Where the elements are positive or negative is determined by the sign of the elements in the rotation matrix .  
Factoring the Rotation 
If we were to scale the entire matrix evenly, the top row would dominate as it is always positive, and the necessary discrete representation would be characterised by ==3 . This would, however, necessitate the matrix being stored in a data type with at least 2 more bits than the source type. 
The second and third rows each sum to zero (·1==[Sqrt[3],0,0], where 1 is a vector of ones), allowing us to state that each of the rows has one element of the opposite sign to the other two elements. The discretization for the second and third rows then only requires ==2 . It is also possible to pull out common factors from the rows, resulting in all elements taking values between -1 and 1. 

(θ)==(1/Sqrt[3]
Sqrt[2/3]
Sqrt[2/3]

)⊗( 1 	 1 	 1 
 -sin(θ+6) 	 cos(θ) 	 sin(θ-6) 
 -cos(θ+6) 	 -sin(θ) 	 cos(θ-6) 

)
To facilitate the quantization, we next factor the second and third rows such that the largest element of each row equals exactly 1. As previously mentioned, the largest element has the opposite sign to the other two elements in a given row. So, the steps required to perform the factorization are as follows: 
Find the sign of each of the elements. 
Determine which of those elements is of the opposite sign. 
Factor each row by that largest element. 
The sign of the elements is most easily seen by looking at the rotation as phase shifted sine functions. 
[θ]==( 1 	 1 	 1 
 θ-(5π)/6 	 θ+(3π)/6 	 θ-6 
 θ-(2π)/6 	 θ-(6π)/6 	 θ+(2π)/6 

)
So the signs look like  
Each row is a series of three sin waves each (2π)/3 out of phase with each other. The rows areπ/2 out of phase with each other. The largest element changes every π/6 radians repeating every π radians. 
By defining θ as θ==Θ+ — where ==θ  mod 6, and Θ is the starting value for the region in which θ lies — and substituting in the function [ϕ]: 
 [ϕ] 	 ==(1/2) (1+Sqrt[3]tan(ϕ)) 


we can now rewrite the factored rotation as shown in 
We can now relate the functions to each other, since they are now essentially the same function, and  has the same domain; the values they take have the same range, despite being in different positions in the matrix. This allows us to write the piecewise function  independently as a function , which re-orders the elements of the matrix in region A appropriately for the other regions. 
 [θ] 	 ==[,θ] 
  	 ==[( 1 	 1 	 1 
 fRe
() 	 1 	 fRe
(
-
) 
 fRe
(
(π/6)-
) 	 fRe
(
-(π/6)
) 	 1 

),θ] 


The scaling factor () can also be further simplified by separating the sign and combining the functional parts.   (θ) 	 
1 	 


  	 ==()  where  Overscript[θ, ~]
==
θ
mod
π/3
Overscript[ϑ, ~]
==
(θ-6)
mod
π/3

 

 
then (θ)==(θ)⊗(θ), where  is a piecewise function containing the signs.  
 [θ] 	 ==[θ]+[θ] 
  	 ==[θ]⊗⊗(θ)⊗[n]⊗[θ]⊗[[θ,n]+[θ,n]] 
  	 ==( 1 
 1 
 1 

)⊗( 1 
 2 
 2 

)⊗(θ)⊗[[θ,n]+[θ,n]] 


defining 
 [θ,n] 	 ==( 1 
 2 
 2 

)⊗(θ) 
 [θ] 	 ==[θ]⊗[[θ,n]] 
 [θ] 	 ==[θ]⊗[[θ,n]] 


the perturbation to the rotated channel elements  is found for an input set of pixel values ==(2^n) 
 + 	 ==[θ]·+[θ]· 
  	 ==(2^n) [θ]· 
  	 ==(2^n) [θ]⊗[[θ,n]]· 
  	 ==[( 0 
 2
[] 
 2
[6-] 

)⊗( 0 	 0 	 0 
 1 	 0 	 -1 
 1 	 -1 	 0 

),θ] 


So, to minimize the perturbation, we need to simultaneously minimize ±2[] and ±2[6-] 
caption Perturbation to channels a and b against angle δθ 
For n == 8 with ι regions shaded and extrema labelled  
The maxima for each function are where ±2[]==±1 and ±2[6-]==±1, and the minima are where ±2[]==0 and ±2[6-]==0. To find the corresponding values of , all that is needed is an inverse function for . In essence [ϕ] discretizes Sqrt[3]tan(ϕ) into steps of 2^(3-n). The minima can be found by taking the inverse of Sqrt[3]tan(ϕ), given that 0<=Sqrt[3]tan(ϕ)<=1 for 0<=ϕ<=6 we can say that Round [2^(n-3) Sqrt[3]tan(ϕ)]∈{0,1,2,⋯ 2^(n-3)} 
 [ϕ] 	 ==0 	 [6-ϕ] 	 ==0  when 
 2^(n-3) Sqrt[3]tan(ϕ) 	 ==m 	 2^(n-3) Sqrt[3]tan(6-ϕ) 	 ==m  where  m==0,1,2⋯ (2^(n-3)) 
 b== 	 arctan((m 2^(3-n))/Sqrt[3]) 	 a== 	 arctan((2Sqrt[3]m)/(2^n-2m)) 


The maxima can be found by recognizing that the maximum rounding error is a half and evaluating at these points 
 [b] 	 ==±1 	 [6-a] 	 ==±1  when 
 b 	 ==arctan(2^(3-n)/Sqrt[3](m+1/2)) 	 a 	 ==arctan((2Sqrt[3](m+1/2))/(2^n-2(m+1/2))) 
 b 	 ==arctan(((2m+1)2^(2-n))/Sqrt[3]) 	 a 	 ==arctan((Sqrt[3](2m+1))/(2^n-2m-1)) 
    	 with  m==0,1,2,3⋯ 2^(n-3)-1 		


We are interested in a compromise between the perturbations to each channel which is where the perturbations intersect. It would be useful to be able to assign a relative importance α and β to each channel a and b respectively.  
β [ϕ]==α [π/6-ϕ]  when
 β Round [2^(n-3) Sqrt[3]tan(ϕ)]-α Round [2^(n-3) Sqrt[3]tan(π/6-ϕ)] 
 ==(2^(n-3)) (Sqrt[3]α tan(θ)+2β sin(θ)sec(π/6-θ)) 




The values α and β can only move the point of intersection within the bounds of the extrema. Therefore, any solution for the point of intersection will enable the bounding extrema to be identified. 
We solve first for the case where α==1 and β==1. Recognizing that the rounded part can only take certain values 
i==Round [2^(n-3) Sqrt[3]tan(ϕ)]-Round [2^(n-3) Sqrt[3]tan(π/6-ϕ)]  where  i==0,1,2⋯ 2^(n-2)
then 

i==arctan((Sqrt[i^2 2^(6-2n)-i 2^(4-n)+49]+i 2^(3-n)-7)/(2Sqrt[3]))  where  i==0,1,2⋯ 2^(n-2)


Each point of intersection is defined and bounded by 4 extrema. Comparing with the functional form of the extrema allows these 4 points to be identified. 
Separating the points of intersection into even and odd terms facilitates the identification. 
  	 Channel a  	 Channel b  	 i  
 Minima  	 a
(i/2)
==
a
i  	 b
(i/2)
==
b
i  	 i
∈
{0,2,4,6⋯ 2^(n-2)} 
 Maxima  	 a
((i-1)/2)
==
a
i  	 b
((i-1)/2)
==
b
i  	 i
∈
{1,3,5,7⋯ 2^(n-2)-1}  

 
The following ranges are guaranteed to be true for even or odd values of i, with very specific values of p and q. 
 b
p-1	<
a
q	<

 	 i<	a
q+1
<	b
p

 	 ⋁a
q+1	<
b
p	<

 	 i+1<	b
p+1
<	a
q+2

 	 p	∈
{2N}
q	∈
{2N}
2	<=
i
<=
(2^(n-2))
-
1

 


This slightly glib definition illustrates the pattern for the extrema bounding the points of intersection. At the start of a Π/6 region, i.e. for low values of i, p==i and q==i. The maxima swap orderings between certain values of i within a Π/6 region. This is evident in the inescapable indices of i-1 and i+1, regardless of the starting values for i for either the maxima or minima. So, whilst it is true that ai>bi, it is not always true that ai+1>bi-1. This leads to the question of what happens when this boundary ai+1==bi-1 is crossed. Firstly, the even-odd ordering (i.e. the a-b channel ordering) is flipped; secondly, the indices are shifted. A second transition restores the a-b ordering and shifts the indices again. As the index i passes the half way point ==(2^(n-3)), the transitions occur in the opposite direction, restoring the indices and ordering. Transitions occur where i satisfies ai+ι==bi-ι, with ι∈{1,2,3⋯(7-4Sqrt[3])2^(n-3)}. 

==(2^(n-3))    Γ(ι,n)==Sqrt[ι^2-14ι+^2]


The region ι for a given value of i is the highest value of ι for which the following condition remains true: 

-Γ(ι,n)<=i<=Γ(ι,n)+


For a given value of θ and n, we can find the intersection index i, and from this we can find ι: 

i(δθ,n)==(tan(δθ)(Sqrt[3]tan(δθ)+7))/(tan(δθ)+Sqrt[3])  where  δθ==θ  mod π/6
ι(i,n)==⌊7 -Sqrt[i^2-2i +49 2]⌋


The sequence of a-b channel extrema depends on both the index i and the region ι in the following way: 
 b
i-ι-1	<
a
i+ι	<

 	 i<	a
i+ι+1
<	b
i-ι

 	 when  i
∈
{2N+1}	⋀	ι
∈
{2N+1}
 
⋁
i
∈
{2N}	⋀	ι
∈
{2N}

 
 a
i+ι	<
b
i-ι-1	<

 	 i<	b
i-ι
<	a
i+ι+1

 	 when  (
i∈{2N+1}	⋀	ι
∈
{2N}
) 
⋁
(
i∈{2N}	⋀	ι
∈
{2N+1}
)

 


We want to classify the points of intersection as greater or lesser than a tolerance 0<τ<=1. In order to do this, we make a linear approximation to the perturbation between the extrema. There is one point of intersection between each of the maxima and corresponding minima. A bit of geometry allows us to write a classification criteria for each of the points of intersection. 
Defining a function for the degree of error at the point of intersection using the linear approximation from the four extrema surrounding the point, and generalizing to allow for different maximum errors α for channel a and β for channel b. The conditions on i and ι can be more compactly written by applying a condition to their product. 
h(i,ι)=={ αβ(ai+ι-bi-ι)/(β(ai+ι-ai+ι+1)+α(bi-ι-1-bi-ι)) 	 i+ι∈{2N} 
 αβ(bi-ι-1-ai+ι+1)/(β(ai+ι-ai+ι+1)+α(bi-ι-1-bi-ι)) 	 i+ι∈{2N+1} 


allows the criteria for a channel to be written as τ>=h(i,ι). 
The criteria τ== with α==β selects from either the odd values or the even values of i, because if h(i,n)< is true, then h(i+1,n)< is false and vice versa. There are 2^(n-2) points of intersection and 2^(n-3) which satisfy the criteria τ==1/2. The algorithm as implemented in openCV leaves the decision about the criteria up to the programmer. The programmer chooses a value for θ and selects a value for τ. The algorithm returns the nearest value of θ which satisfies the condition defined by τ. The programmer then decides whether the suggested value for θ is acceptable and either adopts the suggested value, or chooses a value as close as possible, accepting the possibility of errors. 
For example, in this project n is 8, so ∈{-2^(8-2) ⋯ 2^(8-2)}, which gives 2^(8-3)-1 values in each π/6 region, producing a maximum perturbation of less than . In total, there are 12(2^(8-3)-1)==372 possible values for θ which produces a maximum perturbation of less than . This would allow the destination pixel values to be expressed in 8-bit numbers without error using a transformation matrix expressed in 6-bit signed integers. The statistics performed to determine θ are not demanding enough to justify rejecting a suggested value of theta within 1of the requested value. It is, however, important to know the value actually used in the algorithm, which is why the mechanism for adjusting θ is separate from the color-space algorithm and is under the control of the programmer. For instance, in the implementation below, the suggested value is accepted and used to adjust the statistical model, keeping all the values in correct correspondence. 
Preservation of Color Information  
The goal of the algorithm is to preserve all the information captured by the camera which relates to skin whilst discarding as much of the irrelevant information as possible. Given that edges and features often present as shadows and highlights, all the information captured in terms of luminosity will be regarded as relevant information, at least as far as the manipulation of individual pixel values is concerned. Considering the chromatic information, the importance of the pixel value will be directly determined by a Gaussian distribution. 
Knowing the range of values produced by the rotation allows us to scale the transformation to fit into the range of the destination data type. If we have RGB pixel values in a given machine data type, the amount of information contained in each of those channels is equal to the number of values accessible in that data type. For example: for 8-bit, unsigned integers, there are 256 possible values. After a rotation, we are interested in the amount of information which lies along the new axes. This is found simply by multiplying the range of the source data type by the length of the new axes found for the unit cube. To preserve all the information captured, we would therefore have to use a larger data type to store the new values. We are, however, only interested in a small region in the chromatic space. The question is, then, how to preserve the relevant information in a way consistent with the significance indicated by the aforementioned Gaussian distribution. 
None of the rotated axes have lengths less than 1 for the unit RGB cube. For this reason we've written redistribution functions which perform any necessary type conversion whilst preserving the information in a controlled way; we can keep the information where it's needed and discard it where it's irrelevant. So although this is strictly beyond the normal meaning of a color space conversion, it is addressing a connected issue and belongs in the conversion. In terms of optimization, it is also the most efficient place in the code in which to perform this adjustment, allowing us to — for the sake of example — discard the details of the colors of a duck's feathers whilst keeping the hues and tones of human skin. 
We can use a function to redistribute the information contained on the longer axis onto the shorter axis, which can be expressed in the discrete representation of that axis necessitated by internal integer data types. There are three ways in which to implement the redistribution functions: 
Partition  
The most straightforward redistribution method is to simply preserve the information in a 1-to-1 fashion within a region. The region can be defined in terms of the distribution Gaussian by specifying a significance level in terms of the variance or the standard deviation. 
Linear  
A slightly more sophisticated method is to use a linear redistribution. A linear distribution is equivalent to partitioning given a unit gradient. However, a linear redistribution function allows for the possibility of data compression. So then, in the case where the region of interest contains more information than can be expressed in the destination data type, a linear distribution function allows an even compression of the information from source to destination.  Lee2002 
ERF (Gaussian Error Function)  
The integral of the cumulative Gaussian (i.e. Error Function) allows the redistribution of the information on the axis in a way which selectively preserves the information about a point on the axis (i.e. the mean of the Gaussian), and then progressively discard the information as it falls into the tails of the Gaussian. So, it provides a non-linear distribution of the information. The Gaussian can be seen as describing our interest in the information contained along the axis, so it's logical to use the error function to redistribute the information. The disadvantage of this is simply the computational effort involved in generating the error function. 
The error function distribution is mathematically correct, being directly related to the Gaussian fit. Computationally, there are two considerations: the numerical representation, and performance. The discrete representation of the numerics means that — for a significant number of possible distributions — distributing using the error function has little to no advantage (or indeed difference) from using a linear distribution. 
Considering the preservation of information captured, mappings with a gradient greater than 1 are undesirable because they preserve all the information whilst being informatically wasteful in that there are functionally inaccessible discrete values in the destination range. Our stated aim is to preserve the information in the image pertaining to human skin; unevenly distributing this information across a discrete data type is not only wasteful in terms of memory, but also of processing resources because subsequent processing routines will treat the data as if it has a higher fidelity than it actually does. 
To construct a distribution function, we first need to describe the relationship of the error function to the Gaussian fit, and then produce a function with the appropriate range and domain. For a Gaussian fit with an amplitude A, a mean of μ, and a standard deviation of σ, where μ and x lie in a source range  from  to . The cumulative distribution is found by integrating from  to the point x, as can be seen in (2 ): 

∫^xA e^(-((t-μ)^2/(2σ^2)))/(Sqrt[2π]σ) dt==1/2 A(erf((x-μ)/(Sqrt[2]σ))-erf(-μ/(Sqrt[2]σ)))
The Gaussian distribution and the cumulative distribution are shown in Figure XXX  for some values chosen for illustrative purposes. All that is required now is to fix the range  to  for the domain  to . 
First, we determine the maximum value taken in the domain. This is simply found by evaluating the function at . It should be noted that — if the Gaussian distribution is well contained in the source domain — the maximum value should be equal to the amplitude. For the sake of simplicity, we'll ignore the amplitude of the fitted Gaussian found previously as it is not relevant to the design of the redistribution function. So, to fix the range of the distribution function, we first scale to the range 0:1 by simply dividing through by the maximum value, and then re-scale to the destination range ==- and shift by . 

dis(x)==(()(erf((x-μ)/(Sqrt[2]σ))-erf(-μ/(Sqrt[2]σ))))/(erf(-μ/(Sqrt[2]σ))-erf(-μ/(Sqrt[2]σ)))+
Efficiently Implementing the Distribution Function 
Mathematically, the ERF distribution function (2 ) achieves all the stated objectives. However, on a device we are dealing with discrete numerics and limited processing power, so further analysis is required. Where we're using a discrete domain and range, the distribution is usefully divided into three characteristic behaviours: where it is constant, where it preserves all the information, and where it selectively preserves information. Looking at the distribution, this divides the source domain into five regions: two where it is effectively constant, two where it is selective, and one region around the mean where it preserves all the information. In order to design an efficient algorithm, it is useful to identify the boundaries of these five regions. 
The Region Which Discards All Information 
First, we need to identify where the distribution is effectively constant. This can be found by solving the following equation in the region and domain 0<=x<=1 and then generalized to the specific discrete numerics: 

(erf(μ/(Sqrt[2]σ))+erf((x-μ)/(Sqrt[2]σ)))/(erf(μ/(Sqrt[2]σ))-erf((μ-1)/(Sqrt[2]σ)))==dL  where  dL==
The solution is found for the source domain in the range 0:1 as: 

x==Sqrt[2]σ erf^-1 ((dL-1)erf(μ/(Sqrt[2]σ))-dL erf((μ-1)/(Sqrt[2]σ)))+μ
The boundaries of the regions 
StyleBox["x", "TI"]
SubscriptBox[<, 1] and 
StyleBox["x", "TI"]
SubscriptBox[>, 2] for x∈{⋯} or 
StyleBox["x", "TI"]
SubscriptBox[<, 1] and 
StyleBox["x", "TI"]
SubscriptBox[>, 2] for x∈{0⋯ 1} can be written using the following helpful constants of the distribution. 
 Σ^- 	 ==erf((μ-1)/(Sqrt[2]σ)) 	 Σ^+ 	 ==erf(μ/(Sqrt[2]σ)) 	 dL 	 == 	 κ 	 == 



 Subscript[, 1] 	 ==σ Sqrt[2] (erf^-1) ((dL-1)Σ^+-dL Σ^-)+μ 	 Subscript[, 2] 	 ==σ Sqrt[2] (erf^-1) ((dL-1)Σ^--dL Σ^+)+μ 
 Subscript[, 1] 	 ==+(Subscript[, 1](μ,σ)) 	 Subscript[, 2] 	 ==+(Subscript[, 2](μ,σ)) 


The Region Which Keeps All Information
 To find the region where all the information in the source domain is preserved, we differentiate the distribution and solve for where the gradient is equal to the destination range over the source range. This corresponds to the point at which a unit change in the source produces a unit change in the destination range: 

((Sqrt[2/π] e^(-((x-μ)^2/(2σ^2))))/σ(erf(μ/(Sqrt[2]σ))-erf((μ-1)/(Sqrt[2]σ))))==
Rearranging for x, we find: 

x==μ±σ Sqrt[-2log(σ(erf(μ/(Sqrt[2]σ))-erf((μ-1)/(Sqrt[2]σ))))+2log()+log(2/π)]
The boundaries of the region 
SubscriptBox[, 1] < 
StyleBox["x", "TI"]
SubscriptBox[<, 2] for x∈{⋯} and 
SubscriptBox[, 1] < 
StyleBox["x", "TI"]
SubscriptBox[<, 2] for x∈{0⋯ 1} can be written using the following helpful constants of the distribution. 
 Σ^- 	 ==erf((μ-1)/(Sqrt[2]σ)) 	 Σ^+ 	 ==erf(μ/(Sqrt[2]σ)) 	 κ 	 ==
FractionBox[] 



w(μ,σ)==σ Sqrt[log(2/π)-2log(κσ(Σ^+-Σ^-))]
The equations are found in the unit source domain 0:1. It is a simple matter to scale and shift these values to give the points in a more general source domain. 

 Subscript[, 1](μ,σ) 	 ==μ-w(μ,σ) 	 Subscript[, 2](μ,σ) 	 ==μ+w(μ,σ) 
 Subscript[, 1](μ,σ) 	 ==+(μ-w(μ,σ)) 	 Subscript[, 2](μ,σ) 	 ==+(μ+w(μ,σ)) 


One refinement can be made to these values by recognizing that the discrete distribution extends the effectively linear region past the analytic solution by rounding the values. This can be seen in XXX , where the shaded squares are the rounded values. The extended region boundary  was found by numerically solving 

⌊dis(Subscript[, 2])⌋+(
StyleBox["x", "TI"]
SubscriptBox[-, 2])==dis(x)
In the C++ code, whilst numerical routines were used MatLab and Mathematica to perform the analysis, the extended region boundary point was found by 'walking' along the distribution from the analytic point Subscript[, 2] until divergence from linear behaviour became apparent. This is regarded as a simpler solution, not requiring the use of numerical library routines, and proved to be a quick and elegant solution for the C++ implementation. The extended boundaries Subscript[, 1] and Subscript[, 2] are then defined by 

 ⌈dis(
SubscriptBox[, 1])⌉
SubscriptBox[-, 1] 	 ==dis (
SubscriptBox[, 1])
SubscriptBox[-, 1] 	 ⌊dis(
SubscriptBox[, 2])⌋
SubscriptBox[-, 2] 	 ==dis (
SubscriptBox[, 2])
SubscriptBox[-, 2] 


The compression ratio 
There is one final value of interest to the development of the algorithm, which is the gradient at the mean. The reason this is of interest is because we're trying to compress the relevant data as much as possible. If the destination region is small (i.e. the destination machine type is smaller than the source type), then the gradient at the mean allows us to assess the fidelity required of the source type. If it weren't for the fact that the source is the result of a rotation transformation, then there would be little purpose in assessing this value. However, it is entirely possible that the lengthening of the axes resulting from the rotation is insignificant for the desired destination type; there's no point preserving information during the rotation which is then discarded by the redistribution. The gradient is given by 
The compression ratio is at most one-to-one, therefore κ<==1 and the gradient in the unit space must always be greater than one 1<=δ(μ,σ). so κ<=Δ(μ,σ)<=δ(μ,σ). 
The required fidelity in the source domain can be found using Δ in the sense that the correspondence between one information step in the source must produce a step of Δ in the destination type. For the algorithm evaluating the maximum gradient Δ allows us to be sure that  — the region on the x axis where all the information is to be preserved — exists if Δ>1 or tells us that the x axis can be shortened if Δ<1. In the algorithm Δ is used to find an appropriate working data type for the rotated color space and to define the axis scaling for the rotation matrix. 
We need to consider the requested compression of information alongside the spread of information caused by the rotation, and the desired focus on the specific region of interest dictated by the statistics. Each axis in the color space is to be represented by a discrete set of numbers. The size of these sets dictates the discretization of the axis, and the ratios between them indicates the spread or compression of the information they contain. We assume that the RGB axes are each discretized to the same extent, each containing  values. After the application of the un-normalized rotational transformation, the axes contain differing numbers of values given by Subscript[, 1]==  Sqrt[3], Subscript[, 2]==  Subscript[L, 2](θ) and Subscript[, 3]==  Subscript[L, 3](θ). These axis lengths preserve all the information contained in the source color space, and so are the maximum length the axis should take. The minumum length the axis may take is where the information is lost evenly throuought the axis, and corresponds to an axis length equal to the destination axis length ==. 
We can now write an algorithm which determines the necessary scaling for the axes, and whether truncation of the extreme values is significant. As this will alter  we fix the values of κ and Δ to be those for the working range ==L(θ) which preserves all information. With this value the constants are  
{{Cell[TextData[{" ", Cell[BoxData[FormBox[StyleBox["K", "TI"], TraditionalForm]], "InlineFormula"], " "}]], Cell[TextData[{" ", Cell[BoxData[FormBox[RowBox[{"==", FractionBox[]}], TraditionalForm]], "InlineFormula"], " "}]], Cell[TextData[{" ", Cell[BoxData[FormBox[RowBox[{"κ", "(", "θ", ")"}], TraditionalForm]], "InlineFormula"], " "}]], Cell[TextData[{" ", Cell[BoxData[FormBox[RowBox[{"==", FractionBox[StyleBox["K", "TI"], RowBox[{StyleBox["L", FontSlant -> "Bold"], "(", "θ", ")"}]]}], TraditionalForm]], "InlineFormula"], " "}]], Cell[TextData[{" ", Cell[BoxData[FormBox[RowBox[{"Δ", "(", RowBox[{"μ", ",", "σ"}], ")"}], TraditionalForm]], "InlineFormula"], " "}]], Cell[TextData[{" ", Cell[BoxData[FormBox[RowBox[{"==", FractionBox[StyleBox["K", "TI"], RowBox[{StyleBox["L", FontSlant -> "Bold"], "(", "θ", ")"}]], "δ", RowBox[{"(", RowBox[{"μ", ",", "σ"}], ")"}]}], TraditionalForm]], "InlineFormula"], " "}]]}}The length of the axis  after rescaling should be 

 (θ,μ,σ) 	 ==min{K/L(θ) δ(μ,σ),1}L(θ) 
  	 ==min{Kδ(μ,σ),L(θ)} 


The scaling  comes from the source pixel values, the remaining terms translates simply into a rotation matrix scaling  
This satisfies the requirements placed on the gradient Δ(μ,σ)>1 because: if we substitute for  in the definition for the gradient XXX  

 Δ(μ,σ) 	 ==max{K/L(θ) δ(μ,σ),1} 


And the compression ratio κ is also explicitly restricted to being at most one and now is no longer defined in terms of . 
 κ(θ) 	 ==max{1/δ(μ,σ),K/L(θ)} 


A Piecewise Approximation to the ERF Distribution 
We now have equations which give us the four points in the source domain which mark the boundaries of the five characteristic regions. We can now use them to define a piecewise function which uses the computationally problematic error function based distribution as little as possible 

pDis(x)=={  	 
StyleBox["x", "TI"]
SubscriptBox[<=, 1] 
 dis(x) 	 
SubscriptBox[, 1] < 
StyleBox["x", "TI"]
SubscriptBox[<, 1] 
 
StyleBox["x", "TI"]
SubscriptBox[-, 1]+dis (
SubscriptBox[, 1]) 	 
SubscriptBox[, 1] <= 
StyleBox["x", "TI"]
SubscriptBox[<=, 2] 
 dis (
StyleBox["x", "TI"])
SubscriptBox[+, 2]
SubscriptBox[-, 1]-dis (
SubscriptBox[, 2]) + dis (
SubscriptBox[, 1]) 	 
SubscriptBox[, 2] < 
StyleBox["x", "TI"]
SubscriptBox[<, 2] 
 dis (
SubscriptBox[, 2])
SubscriptBox[+, 2]
SubscriptBox[-, 1]-dis (
SubscriptBox[, 2]) + dis (
SubscriptBox[, 1]) 	 
StyleBox["x", "TI"]
SubscriptBox[>=, 2] 


All three distribution techniques ( 2  , 2  , 2  ) described earlier are special cases of this distribution. When the distribution has a very large variance the piecewise distribution can be simplified as a linear distribution figXXX . When the distribution has a very small variance a partitioning is more appropriate fig XXX . The most interesting distributions, however, are the ones which require the use of the piecewise distribution fig XXX .  
The Skin Color Space Algorithm 
Now that all of the values necessary to preserve the skin information have been obtained, we can use them to build a color space transformation algorithm which can make intelligent decisions about the numerical precision for the intermediate and final variables, as well as determining the most efficient transformation methods. The algorithm described herein will take values of θ, the rotation about the luminosity axis, the standard deviations a,b and mean values a,b for the two chromatic axes in the unit range and will automatically decide upon the necessary intermediate working data types and the most efficient redistribution methods. 
Previously, we found a rotational transformation which allows a working type  to be chosen such that <=2. If we were to keep the same data type for the color space  as is used for the RGB values , then the axes would have to be rescaled with the accompanying loss of information. Given that we have values which allow us to assess where all the relevant information lies, a more sophisticated approach is possible. For a chromatic axis — which, after rotation, has a length L(θ) — we can determine the positions on that axis at which the information is considered irrelevant using Equation (2 ) and the positions where the information is all considered relevant. If the gradient Δ XXX  is less than 1, then the distribution loses information at all points on the axis and the axis can be shortened without loss of relevant information. The only further consideration is to ensure that the values outside that range are prevented from causing errors associated with overflow. To exclude this possibility, a conditional statement can be used which checks the bounds as stated, assigning an appropriate value as necessary. The alternative is to use an intermediate value with a higher bit depth, and then to recast into the destination data type in such a way that overflow and underflow are handled appropriately. The OpenCV library provides a casting method — saturateCast — which serves this purpose. 
Setting the Value for the Tolerance 
Now that we have the working type range , accounting for both the rotation and the statistics, we can set a meaningful tolerance on the error. Previously we calculated that the maximum error would occur for pixel values at the corners of the RGB cube, we have now seen that some values are more important than others and that it is more meaningful to use a smaller RGB cube which encloses only the values of interest. This cube is found by taking the values for  as the corners in the rotated space and rotating back to the RGB space. As this only needs to be done once it can be performed using floats in the unit spaces however the values of  account for the discrete numerics in that they are calculated from the discrete values  using the new values for κ and . In order to perform the inverse rotation the values must be shifted to compensate for the natural range of the rotation which is {0:1,-:,-:}. 
 Subsuperscript[, 2, R G B] 	 (==^-1)·(Subscript[, 2]-) 	 where  ==( 0 
 1 
 1 

) 
  	 (==^T)·(⊗(Subscript[, 2]-)) 	


Because rotations of any angle are allowed the values for Subsuperscript[, 1, R G B] may be larger than those for Subsuperscript[, 2, R G B] in the RGB space. A smart programmer could actually take advantage of this. The values may also be outside the RGB cube meaning that the values may have to be truncated to fit inside the RGB cube range. 
The perturbation to the rotated channel elements  is found for an input set of pixel values Subsuperscript[, 2, R G B] 
  	 ==min{Kδ(μ,σ),L(θ)}⊗( 0 
 2 
 2 

)⊗[( 0 
 [
] 
 [
6-
] 

)]⊗([θ]Subsuperscript[·, 2, R G B]) 


We have previously solved the case where both channels are of equal importance we now need to find the values of α and β which set the relative importance of each channel. There are two factors here, the channel scaling and the new smaller RGB cube corners. The values for these also need to be put in correct correspondence with the a and b channel functions. For the scaling this is found by:  
 ( 0 
 α 
 β 

) 	 ==[min{Kδ(μ,σ),L(θ)}⊗( 0 
 2 
 2 

)] 


For the new RGB corners we need to find the largest element which can result from the inner product with [θ]. As the elements of [θ] are in {-1,0,1} with only one occurrence of each in the second and third rows we need to find the largest element of Subsuperscript[, 2, R G B] which is not in the zero position. The algorithm solves: 
 ( 0 
 α 
 β 

) 	 ==[max{abs([θ])⊗(Subsuperscript[, 2, R G B])^T}] 


where max acts on each row and abs([θ])==[θ]⊗[θ]. These then give a combined value for α==Subscript[α, 1] Subscript[α, 2] and β==Subscript[β, 1] Subscript[β, 2]. Because the axis have been scaled so that the information on the axis is to be kept at least near the mean the tolerance should be set to τ==1 the condition for accepting a value of θ 1>h(i,ι;α,β) can be used.  